@model IEnumerable<string>
@{
    ViewData["Title"] = "Process Log";
    var currentFilter = Context.Request.Query["filter"].ToString();
    var currentPage = int.TryParse(Context.Request.Query["page"], out var p) ? p : 1;
}

<div class="container mt-4">
    <h2 class="mb-4">Process Log</h2>

    <div class="row mb-3">
        <div class="col-md-6 col-lg-4 mb-2">
            <div class="input-group">
                <input type="text" class="form-control" id="filterInput" placeholder="Filter logs..." value="@currentFilter" />
                <button class="btn btn-primary" id="filterBtn" type="button">Filter</button>
            </div>
        </div>
        <div class="col-auto mb-2">
            <button class="btn btn-secondary" id="refreshBtn" type="button">Refresh</button>
        </div>
        <div class="col-auto mb-2 d-flex align-items-center">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="autoRefreshChk" />
                <label class="form-check-label" for="autoRefreshChk">
                    Auto-refresh every 2s
                </label>
            </div>
        </div>
    </div>

    <div id="logList" class="mb-3">
        @{
            await Html.RenderPartialAsync("ProcessLogList", Model);
        }
    </div>

    <nav aria-label="Process log pagination">
        <ul class="pagination justify-content-center" id="pagination">
            <li class="page-item disabled">
                <button class="page-link" id="prevPageBtn" type="button">Prev</button>
            </li>
            <li class="page-item disabled">
                <span class="page-link">Page @currentPage</span>
            </li>
            <li class="page-item">
                <button class="page-link" id="nextPageBtn" type="button">Next</button>
            </li>
        </ul>
    </nav>
</div>

@section Scripts {
    <script>
        let currentPage = @currentPage;
        let currentFilter = '@currentFilter';
        let autoRefresh = false;
        let autoRefreshTimer = null;

        function loadLogs(page, filter) {
            console.log(`Loading logs for page ${page} with filter "${filter}"`);

            $.get('@Url.Action("ProcessLogList", "Home")', { page: page, filter: filter }, function (data) {
                $('#logList').html(data);
            });
        }

        $('#filterBtn').on('click', function () {
            currentFilter = $('#filterInput').val();
            currentPage = 1;
            loadLogs(currentPage, currentFilter);
        });

        $('#refreshBtn').on('click', function () {
            loadLogs(currentPage, currentFilter);
        });

        $('#prevPageBtn').on('click', function () {
            if (currentPage > 1) {
                currentPage--;
                if (currentPage === 1) {
                    $('#prevPageBtn').parent().addClass('disabled');
                }
                loadLogs(currentPage, currentFilter);
            }
        });

        $('#nextPageBtn').on('click', function () {
            currentPage++;
            if(currentPage > 1) {
                $('#prevPageBtn').parent().removeClass('disabled');
            }
            loadLogs(currentPage, currentFilter);
        });

        $('#autoRefreshChk').on('change', function () {
            autoRefresh = this.checked;
            if (autoRefresh) {
                autoRefreshTimer = setInterval(function () {
                    loadLogs(currentPage, currentFilter);
                }, 2000);
            } else {
                clearInterval(autoRefreshTimer);
            }
        });
    </script>
}


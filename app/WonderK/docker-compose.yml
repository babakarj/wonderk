services:
  wonderk.webpanel:
    image: ${DOCKER_REGISTRY-}wonderkwebpanel
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
    ports:
      - "5020:8080"
      - "5021:8081"
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    depends_on:
      redis:
        condition: service_healthy
      wonderk.rulechecker:
        condition: service_started
    build:
      context: .
      dockerfile: WonderK.WebPanel/Dockerfile

  wonderk.rulechecker:
    image: ${DOCKER_REGISTRY-}rulechecker
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
    ports:
      - "5010:8080"
      - "5011:8081"
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    depends_on:
      redis:
        condition: service_healthy
      wonderk.rulechecker2:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/healthcheck" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    build:
      context: .
      dockerfile: WonderK.RuleChecker/Dockerfile

  # the second instance of the rule checker service with no webpanel
  wonderk.rulechecker2:
    image: ${DOCKER_REGISTRY-}rulechecker2
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
    volumes:
      - ${APPDATA}2/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}2/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}2/ASP.NET/Https:/home/app/.aspnet/https:ro
      - ${APPDATA}2/ASP.NET/Https:/root/.aspnet/https:ro
    deploy:
      replicas: 2
    depends_on:
      redis:
        condition: service_healthy
    build:
      context: .
      dockerfile: WonderK.RuleChecker/Dockerfile

  wonderk.departmentheavy:
    image: ${DOCKER_REGISTRY-}departmentheavy
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "pgrep", "dotnet" ]
      interval: 30s
      timeout: 10s
      retries: 3
    build:
      context: .
      dockerfile: WonderK.Department.Heavy/Dockerfile

  wonderk.departmentinsurance:
    image: ${DOCKER_REGISTRY-}departmentinsurance
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "pgrep", "dotnet" ]
      interval: 30s
      timeout: 10s
      retries: 3
    build:
      context: .
      dockerfile: WonderK.Department.Insurance/Dockerfile

  wonderk.departmentmail:
    image: ${DOCKER_REGISTRY-}departmentmail
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "pgrep", "dotnet" ]
      interval: 30s
      timeout: 10s
      retries: 3
    build:
      context: .
      dockerfile: WonderK.Department.Mail/Dockerfile

  wonderk.departmentregular:
    image: ${DOCKER_REGISTRY-}departmentregular
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "pgrep", "dotnet" ]
      interval: 30s
      timeout: 10s
      retries: 3
    build:
      context: .
      dockerfile: WonderK.Department.Regular/Dockerfile

  redis:
    image: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
